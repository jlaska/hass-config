mini-area-card:
  variables:
    motion_entity: null
    door_entity: null
    alert_entity: null
    temperature_entity: null
    light_entity: null
    fan_entity: null
  show_name: true
  show_state: false
  show_icon: false
  show_live_stream: false
  styles:
    card:
      - padding: 0px
      - aspect-ratio: 16 / 9
      - background: linear-gradient(0deg, rgba(33, 33, 33, 0.9) 0%, rgba(33, 33, 33, 0) 45%)
      - background-color: rgba(0,100,150,0.7)
    grid:
      - grid-template-areas: |
          "n alerts"
          "sensors buttons"
      - grid-template-columns: 1fr max-content
      - grid-template-rows: 1fr 1fr
    name:
      - color: var(--text-accent-color, var(--text-primary-color))
      - justify-self: start
      - align-self: start
      - padding-top: 0px
      - padding-left: 10px
      - z-index: 1
    img_cell:
      - grid-column: 1 / span 2
      - grid-row: 1 / span 2
    custom_fields:
      alerts:
        - justify-self: end
        - align-self: start
        - padding-right: 0px
        - padding-top: 0px
        - z-index: 1
      buttons:
        - justify-self: end
        - align-self: end
        - padding-right: 0px
        - padding-bottom: 0px
        - z-index: 1
      sensors:
        - justify-self: start
        - align-self: end
        - padding-left: 10px
        - padding-bottom: 10px
        - z-index: 1
      camera_image:
        - position: absolute
        - width: 100%
        # FIXME: '-1' causes problems when outside a state-switch card ???
        - z-index: 0
  custom_fields:
    camera_image: |
      [[[
        return (typeof entity !== 'undefined') ? html`
          <hui-image
            .hass=${hass}
            .cameraImage=${entity.entity_id}
            .entity=${entity.entity_id}
            .cameraView="auto"
            .width="100%"
          ></hui-image>` : ``;
      ]]]
    alerts:
      card:
        type: custom:layout-card
        layout_type: custom:grid-layout
        layout:
          grid-template-columns: repeat(3, auto)
          grid-template-rows: auto
        cards:
          - type: custom:button-card
            entity: '[[[ return variables.alert_entity ]]]'
            show_icon: true
            show_state: false
            show_name: false
            icon: |
              [[[
                if (variables.alert_entity !== null && 'current_activity' in states[variables.alert_entity].attributes ) {
                  var current_activity = states[variables.alert_entity].attributes.current_activity;
                  console.log(current_activity);
                  if (current_activity == 'Watch TV') {
                    return states['switch.hubname_watch_tv'].attributes.icon;
                  } else if (current_activity == 'Watch Apple TV') {
                    return states['switch.hubname_watch_apple_tv'].attributes.icon;
                  } else if (current_activity == 'Watch Nintendo') {
                    return states['switch.hubname_watch_nintendo'].attributes.icon;
                  } else {
                    return 'mdi:television-off';
                  }
                }
              ]]]
            styles:
              card:
                - box-shadow: none
                - background: none
                - width: var(--mdc-icon-button-size, 28px)
                - height: var(--mdc-icon-button-size, 28px)
                - padding: >-
                    calc( (var(--mdc-icon-button-size, 28px) -
                    var(--mdc-icon-size, 28px)) / 2 )
              icon:
                - width: 100%
                - background: var(--accent-color)
                - color: var(--text-accent-color, var(--text-primary-color))
                - border-radius: 50%
            state:
              - value: |
                  [[[
                    if (variables.alert_entity === null || ['off', 'docked'].includes(states[variables.alert_entity].state.toLowerCase()))
                      return true;
                    return false;
                  ]]]
                operator: template
                styles:
                  card:
                    - display: none
          - type: custom:button-card
            entity: '[[[ return variables.door_entity ]]]'
            show_icon: true
            show_state: false
            show_name: false
            styles:
              card:
                - box-shadow: none
                - background: none
                - width: var(--mdc-icon-button-size, 28px)
                - height: var(--mdc-icon-button-size, 28px)
                - padding: >-
                    calc( (var(--mdc-icon-button-size, 28px) -
                    var(--mdc-icon-size, 28px)) / 2 )
              icon:
                - width: 100%
                - background: var(--accent-color)
                - color: var(--text-accent-color, var(--text-primary-color))
                - border-radius: 50%
            state:
              - value: |
                  [[[
                    if (variables.door_entity === null || states[variables.door_entity].state == 'off')
                      return true;
                    return false;
                  ]]]
                operator: template
                styles:
                  card:
                    - display: none
          - type: custom:button-card
            entity: '[[[ return variables.motion_entity ]]]'
            show_icon: true
            show_state: false
            show_name: false
            styles:
              card:
                - box-shadow: none
                - background: none
                - width: var(--mdc-icon-button-size, 28px)
                - height: var(--mdc-icon-button-size, 28px)
                - padding: >-
                    calc( (var(--mdc-icon-button-size, 28px) -
                    var(--mdc-icon-size, 28px)) / 2 )
              icon:
                - width: 100%
                - background: var(--accent-color)
                - color: var(--text-accent-color, var(--text-primary-color))
                - border-radius: 50%
            state:
              - value: |
                  [[[
                    if (variables.motion_entity === null || states[variables.motion_entity].state == 'off')
                      return true;
                    return false;
                  ]]]
                operator: template
                styles:
                  card:
                    - display: none
    sensors:
      card:
        type: custom:button-card
        entity: '[[[ return variables.motion_entity ]]]'
        show_icon: false
        show_state: true
        show_name: false
        state_display: |
          [[[
            var minute = 60,
                hour = minute * 60,
                day = hour * 24,
                week = day * 7;
            const now = new Date();
            const then = new Date(states[variables.motion_entity].last_changed);
            const delta = Math.round((now - then) / 1000);
            var fuzzy = 'never';
            if (delta < 30) {
              fuzzy = 'just now';
            } else if (delta < minute) {
              fuzzy = delta + ' seconds ago';
            } else if (delta < 2 * minute) {
              fuzzy = 'a minute ago'
            } else if (delta < hour) {
              fuzzy = Math.floor(delta / minute) + ' minutes ago';
            } else if (Math.floor(delta / hour) == 1) {
              fuzzy = '1 hour ago'
            } else if (delta < day) {
              fuzzy = Math.floor(delta / hour) + ' hours ago';
            } else if (delta < day * 2) {
              fuzzy = 'yesterday';
            }
            return fuzzy;
          ]]]
        styles:
          grid:
            - grid-template-columns: min-content auto
            - grid-template-rows: 1fr
            - grid-template-areas: |
                "i s"
          card:
            - box-shadow: none
            - background: none
          icon:
            - justify-self: start
            - color: red
            - border-radius: 50%
            - background-color: 'var(--area-button-color, #727272b2)'
            - height: calc(var(--mc-unit) * 0.475)
            - width: calc(var(--mc-unit) * 0.5)
            - '--mdc-icon-size': calc(var(--mc-unit) * 0.5)
          state:
            - justify-self: start
            - color: var(--text-accent-color, var(--text-primary-color))
            - font-size: 12px
            - opacity: 0.8
    buttons:
      card:
        type: custom:layout-card
        layout_type: custom:grid-layout
        layout:
          grid-template-columns: auto auto
          grid-template-rows: auto
        cards:
          - type: custom:button-card
            entity: '[[[ return variables.fan_entity ]]]'
            show_icon: true
            show_state: false
            show_name: false
            tap_action:
              action: toggle
            hold_action:
              action: more-info
            styles:
              card:
                - box-shadow: none
                - background: none
                - width: var(--mdc-icon-button-size, 28px)
                - height: var(--mdc-icon-button-size, 28px)
                - padding: >-
                    calc( (var(--mdc-icon-button-size, 28px) -
                    var(--mdc-icon-size, 28px)) / 2 )
              icon:
                - width: 100%
                - border-radius: 50%
                - color: white
                - background-color: 'var(--area-button-color, #727272b2)'
            state:
              - value: 'on'
                styles:
                  icon:
                    - color: var(--paper-item-icon-active-color)
                    - animation: |
                        [[[
                          if (variables.fan_entity === null)
                            return;
                          if (['motion'].includes(states[variables.fan_entity].attributes.device_class)) {
                            return 'wiggle 0.5s linear infinite alternate';
                          } else if (variables.fan_entity.startsWith('fan.')) {
                            return "rotating 1.5s reverse linear infinite";
                          }
                        ]]]
          - type: custom:button-card
            entity: '[[[ return variables.light_entity ]]]'
            show_icon: true
            show_state: false
            show_name: false
            tap_action:
              action: toggle
            hold_action:
              action: more-info
            state:
              - value: 'on'
                styles:
                  icon:
                    - color: var(--paper-item-icon-active-color)
                    - animation: |
                        [[[ 
                          if (variables.light_entity === null)
                            return;
                          if (['motion'].includes(states[variables.light_entity].attributes.device_class)) {
                            return 'wiggle 0.5s linear infinite alternate';
                          } else if (variables.light_entity.startsWith('fan.')) {
                            return "rotating 1.5s reverse linear infinite";
                          } 
                        ]]]
            styles:
              card:
                - box-shadow: none
                - background: none
                - width: var(--mdc-icon-button-size, 28px)
                - height: var(--mdc-icon-button-size, 28px)
                - padding: >-
                    calc( (var(--mdc-icon-button-size, 28px) -
                    var(--mdc-icon-size, 28px)) / 2 )
              icon:
                - width: 100%
                - border-radius: 50%
                - color: white
                - background-color: 'var(--area-button-color, #727272b2)'
