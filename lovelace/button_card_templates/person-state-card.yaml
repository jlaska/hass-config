person-state-card:
  variables:
    entity: null
    activity: null
    battery_level: null
    connection_type: null
    busy_entity: null
  entity: '[[[ return variables.entity ]]]'
  layout: vertical
  show_entity_picture: true
  show_name: false
  card_mod:
    style: |
      ha-card {
        border-radius: 0;
      }
  styles:
    card:
      - width: 80px
      - height: 87px
      - background: none
      - box-shadow: none
    entity_picture:
      - width: 80%
      - border-radius: 50%
      - box-shadow: >-
          var( --ha-card-box-shadow, 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px
          1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)
          )
      - border: |
          [[[
            if (variables.busy_entity && states[variables.busy_entity].state == 'on') {
              return "2px solid var(--state-not_home-color)";
            }
          ]]]
    custom_fields:
      activity:
        - position: absolute
        - right: 0px
        - top: 0px
        - border-radius: 50% 0% 50% 50%
        - height: 18px
        - width: 18px
        - line-height: 15px
        - padding: 2px
        - background-color: none
        - color: |
            [[[
              if ('state' in states[variables.activity] && ['on', 'home'].includes(states[variables.activity].state.toLowerCase())) {
                return `var(--paper-item-icon-active-color)`;
              } else {
                return `var(--paper-item-icon-color)`;
              }
            ]]]
      location:
        - position: absolute
        - left: 0px
        - top: 0px
        - border-radius: 0px 50% 50% 50%
        - height: 18px
        - width: 18px
        - line-height: 15px
        - padding: 2px
        - background-color: none
        - color: |
            [[[
              return `var(--paper-item-icon-color)`;
            ]]]
      battery_level:
        - position: absolute
        - right: 0px
        - bottom: 0px
        - border-radius: 50% 50% 0% 50%
        - height: 18px
        - width: 18px
        - line-height: 15px
        - padding: 2px
        - background-color: none
        - color: |
            [[[
              if ('state' in states[variables.battery_level] && ['on', 'home'].includes(states[variables.battery_level].state.toLowerCase())) {
                return `var(--paper-item-icon-active-color)`;
              } else {
                return `var(--paper-item-icon-color)`;
              }
            ]]]
      connection_type:
        - position: absolute
        - left: 0px
        - bottom: 0px
        - border-radius: 50% 50% 50% 0%
        - height: 18px
        - width: 18px
        - line-height: 15px
        - padding: 2px
        - background-color: none
        - color: |
            [[[
              if ('state' in states[variables.connection_type] && ['on', 'home'].includes(states[variables.connection_type].state.toLowerCase())) {
                return `var(--paper-item-icon-active-color)`;
              } else {
                return `var(--paper-item-icon-color)`;
              }
            ]]]
  custom_fields:
    location: |
      [[[
        var person_entity = entity.entity_id;
        var ha_icon='mdi:map-marker-question-outline';
        if ("icon" in states[person_entity].attributes) {
          ha_icon = states[person_entity].attributes.icon;
        } else if ("source" in states[person_entity].attributes) {
          var device_tracker = states[person_entity].attributes.source;
          var location = states[device_tracker].state;
          var zone_entity = 'zone.' + location.toLowerCase();
          try { 
            var zone_match = Object.keys(states).filter((key) => key == zone_entity);
            ha_icon = states[zone_match[0]].attributes.icon;
          } catch (e) {}
        }
        return `<ha-icon
          icon="${ha_icon}">
          </ha-icon>`;
      ]]]
    battery_level: |
      [[[
        return `<ha-icon
          icon="${states[variables.battery_level].attributes.icon}">
          </ha-icon>`
      ]]]
    activity: |
      [[[
        return `<ha-icon
          icon="${states[variables.activity].attributes.icon}">
          </ha-icon>`
      ]]]
    connection_type: |
      [[[
        return `<ha-icon
          icon="${states[variables.connection_type].attributes.icon}">
        </ha-icon>`
      ]]]
