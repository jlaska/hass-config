ge_switch_led_light:
  alias: Configure GE Switch LED Light
  mode: single
  icon: hass:switch
  variables:
    node_parameter: 3
    entity_ids:
    - switch.guest_bathroom_fan_switch
    - switch.guest_bathroom_light_switch
    - light.henrys_room_light
    - switch.henrys_room_fan_switch
    - switch.henrys_room_fan_light_switch
    - switch.kids_bathroom_fan_switch
    - switch.kids_bathroom_light_switch
    - switch.master_bathroom_fan_switch
    - switch.master_bathroom_shower_light_switch
    - switch.master_bathroom_toilet_fan_switch
    - switch.master_bathroom_toilet_light_switch
    - switch.shannons_closet_light_switch
    - switch.stairway_light_switch
    - switch.upstairs_hallway_light_switch
    - switch.williams_closet_light_switch
    - switch.james_closet_light_switch
    - switch.guest_room_closet_light_switch
    - switch.master_bedroom_nightstand_switch
    - switch.master_bedroom_fan_switch
  fields:
    node_value:
      description: The config value used (0=on_without_power, 1==on_with_power, 2==always_off,
        3==always_on)
      example: 2
  sequence:
  - repeat:
      while:
      - alias: Loop through zwave nodess
        condition: template
        value_template: '{{ repeat.index <= entity_ids|length }}'
      sequence:
      - service: zwave_js.set_config_parameter
        target:
          entity_id: '{{ entity_ids[repeat.index - 1] }}'
        data:
          parameter: '{{node_parameter|int}}'
          value: '{{node_value|int}}'
zone_geofence_notification:
  fields:
    trigger_event:
      description: Trigger event ('enter' or 'leave')
      required: true
    trigger_person:
      description: Trigger entity_id (e.g. 'person.john_smith')
      required: true
    trigger_zone:
      description: Trigger zone entity_id (e.g. 'zone.home')
      required: true
  sequence:
  - variables:
      action_open: '{{ ''OPEN_'' ~ context.id }}'
  - alias: Determine how to notify
    choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger_zone == "zone.home" and trigger_event == "enter"
          and trigger_person == "person.james" }}'
      sequence:
      - service: notify.mobile_app_james_iphone
        data:
          message: Welcome home {{ state_attr(trigger_person, 'friendly_name') }}
          data:
            group: zone-geofence
            tag: zone-geofence-{{ trigger_person }}
            action_data:
              latitude: '35.783595'
              longitude: '-78.776728'
            actions:
            - action: '{{ action_open }}'
              title: Open Garage
              authenticationRequired: true
      - wait_for_trigger:
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: '{{ action_open }}'
          context: {}
        continue_on_timeout: false
        timeout: 120
      - alias: Perform the action
        choose:
        - conditions:
          - condition: template
            value_template: '{{ wait.trigger.event.data.action == action_open }}'
          sequence:
          - service: cover.open_cover
            target:
              entity_id: cover.garage_door_shelly
    - conditions:
      - condition: template
        value_template: '{{ trigger_person != "person.james" }}'
      sequence:
      - service: notify.mobile_app_james_iphone
        data:
          title: Zone change for {{ state_attr(trigger_person, 'friendly_name') }}
          message: '{{ state_attr(trigger_person, ''friendly_name'') }} {{ trigger_event
            == ''enter'' and ''arrived at'' or ''left'' }} {{ state_attr(trigger_zone,
            ''friendly_name'') }}'
          data:
            group: zone-geofence
            tag: zone-geofence-{{ trigger_person }}
            action_data:
              latitude: '35.783595'
              longitude: '-78.776728'
  mode: restart
  alias: Zone Geofence Notification
  icon: hass:garage
zone_geofence_handler:
  alias: Zone Geofence Handler
  mode: restart
  icon: hass:map-marker
  fields:
    trigger_event:
      description: Trigger Event ('enter' or 'leave')
      required: true
    trigger_person:
      description: Trigger entity_id (e.g. 'person.john_smith')
      required: true
    trigger_zone:
      description: Trigger Zone entity_id (e.g. 'zone.home')
      required: true
  sequence:
  - alias: Send notifications
    service: script.zone_geofence_notification
    data:
      trigger_event: '{{ trigger_event }}'
      trigger_person: '{{ trigger_person }}'
      trigger_zone: '{{ trigger_zone }}'
  - alias: Pulse lights
    service: script.zone_geofence_light_pulse
    data:
      trigger_event: '{{ trigger_event }}'
      trigger_person: '{{ trigger_person }}'
      trigger_zone: '{{ trigger_zone }}'
zone_geofence_light_pulse:
  mode: single
  alias: Zone Geofence Light Pulse
  icon: hass:led-strip
  variables:
    lifx_mode: breathe
    light_brightness: 255
    light_period: 4
    light_cycles: 20
    lifx_entities:
    - light.living_room_bookshelf_left
    - light.living_room_bookshelf_right
    - light.living_room_table_lamp
    - light.dining_room_floor_lamp
    sengled_entities:
    - light.kitchen_end_table_light_zha_group_0x0004
    - light.henrys_room_floor_lamp
    - light.henrys_room_table_lamp
    - light.williams_room_floor_lamp
    - light.williams_room_table_lamp
  fields:
    trigger_event:
      description: Trigger event ('enter' or 'leave')
      required: true
    trigger_person:
      description: Trigger entity_id (e.g. 'person.john_smith')
      required: true
    trigger_zone:
      description: Trigger zone entity_id (e.g. 'zone.home')
      required: true
  sequence:
  - service: scene.create
    enabled: false
    data:
      scene_id: snapshot_zone_pulse
      snapshot_entities: '{{ sengled_entities|list }}'
  - alias: Determine the light pulse color
    choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger_zone == "zone.home" and trigger_event == "enter"
          }}'
      sequence:
      - service: input_text.set_value
        data:
          value: darkred
        target:
          entity_id: input_text.zone_pulse_color
    - conditions:
      - condition: template
        value_template: '{{ trigger_zone == "zone.home" and trigger_event == "leave"
          }}'
      sequence:
      - service: input_text.set_value
        data:
          value: darkgreen
        target:
          entity_id: input_text.zone_pulse_color
    - conditions:
      - condition: template
        value_template: '{{ trigger_zone in ["zone.rht", "zone.ncdg"] and trigger_event
          == "leave" }}'
      sequence:
      - service: input_text.set_value
        data:
          value: yellow
        target:
          entity_id: input_text.zone_pulse_color
    default:
    - service: input_text.set_value
      data:
        value: homeassistant
      target:
        entity_id: input_text.zone_pulse_color
  - service: lifx.effect_pulse
    target:
      entity_id: '{{ lifx_entities }}'
    data:
      mode: '{{ lifx_mode }}'
      brightness: '{{ light_brightness|int }}'
      cycles: '{{ light_cycles|int }}'
      period: '{{ light_period|int }}'
      color_name: '{{ states(''input_text.zone_pulse_color'') }}'
  - alias: Assert Not Quiet Time
    condition: state
    entity_id: schedule.quiet_time
    state: 'off'
  - service: light.turn_on
    enabled: false
    target:
      entity_id: '{{ sengled_entities|list }}'
    data:
      brightness: '{{ light_brightness|int }}'
      transition: 1
      color_name: '{{ states(''input_text.zone_pulse_color'') }}'
  - service: scene.turn_on
    enabled: false
    target:
      entity_id: scene.snapshot_zone_pulse
    data:
      transition: 1
sengled_light_pulse_test:
  alias: Sengled Light Pulse Test
  mode: restart
  icon: hass:lamps
  variables:
    lifx_mode: breathe
    light_brightness: 255
    light_period: 2
    light_cycles: 10
    sengled_entities:
    - light.kitchen_end_table_light_zha_group_0x0004
    - light.henrys_room_floor_lamp
    - light.henrys_room_table_lamp
    - light.williams_room_floor_lamp
    - light.williams_room_table_lamp
  sequence:
  - service: scene.create
    data:
      scene_id: snapshot_zone_pulse
      snapshot_entities: '{{ sengled_entities|list }}'
  - service: light.turn_on
    target:
      entity_id: '{{ sengled_entities|list }}'
    data:
      brightness: '{{ light_brightness|int }}'
      transition: 4
      color_name: '{{ states(''input_text.zone_pulse_color'') }}'
  - repeat:
      while:
      - condition: template
        value_template: '{{ False or repeat.index < light_cycles|int }}'
      sequence:
      - delay:
          seconds: 2
      - service: light.toggle
        target:
          entity_id: '{{ sengled_entities|list }}'
        data:
          brightness: '{{ light_brightness|int }}'
          transition: 1
          color_name: '{{ states(''input_text.zone_pulse_color'') }}'
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - service: scene.turn_on
    target:
      entity_id: scene.snapshot_zone_pulse
    data:
      transition: 4
announce:
  alias: Announce
  mode: queued
  icon: mdi:bullhorn-outline
  fields:
    message:
      description: Message to announce
      required: true
    entity_id:
      description: Entity id
      default: media_player.all_speakers
  variables:
    all_speakers:
    - entity_id: media_player.all_speakers
      normal: 0.7
      quiet: 0.4
      announce: true
      volume: true
    - entity_id: media_player.dining_room_speaker
      normal: 0.7
      quiet: 0.7
      announce: false
      volume: true
    - entity_id: media_player.living_room_display
      normal: 0.7
      quiet: 0.7
      announce: false
      volume: true
    - entity_id: media_player.master_bedroom_homepod
      normal: 0.6
      quiet: 0.3
      announce: true
      volume: true
    - entity_id: media_player.living_room_homepod_left
      normal: 0.7
      quiet: 0.7
      announce: false
      volume: false
    - entity_id: media_player.living_room_homepod_right
      normal: 0.7
      quiet: 0.7
      announce: false
      volume: false
  sequence:
  - alias: Assert someone is home
    condition: or
    conditions:
    - condition: state
      entity_id: person.shannon
      state: home
    - condition: state
      entity_id: person.james
      state: home
  - alias: Assert not quiet time
    condition: state
    entity_id: schedule.quiet_time
    state: 'off'
  - alias: Assert not morning run
    condition: state
    entity_id: schedule.morning_run_time
    state: 'off'
  - service: script.disable_google_home_chime
    data: {}
    enabled: false
  - variables:
      volume_mode: "{%- if is_state('schedule.quiet_time', 'on') or is_state('calendar.work',
        'on') -%}\n  quiet\n{%- else -%}\n  normal\n{%- endif -%} "
  - alias: Set volume
    repeat:
      while:
      - alias: Loop through speakers
        condition: template
        value_template: '{{ repeat.index <= all_speakers|length }}'
      sequence:
      - condition: '{{ all_speakers[repeat.index - 1][''volume''] }}'
      - alias: Set volume
        service: media_player.volume_set
        data:
          volume_level: '{{ all_speakers[repeat.index - 1][ volume_mode ] }}'
          entity_id: '{{ all_speakers[repeat.index - 1][''entity_id''] }}'
  - alias: Announce
    repeat:
      while:
      - alias: Loop through speakers
        condition: template
        value_template: '{{ repeat.index <= all_speakers|length }}'
      sequence:
      - condition: '{{ all_speakers[repeat.index - 1][''announce''] }}'
      - alias: Announce
        service: tts.google_translate_say
        data:
          message: '{{ message }}'
          entity_id: '{{ all_speakers[repeat.index - 1][''entity_id''] }}'
  max: 4
notify:
  alias: Notify
  mode: single
  icon: mdi:bell-ring
  fields:
    title:
      description: Notification title
      required: true
      selector:
        text:
    message:
      description: Notification message
      required: true
      selector:
        text:
          multiline: true
    data:
      description: 'Notification data (e.g. {''tag'': ''foo'', ''group'': ''bar''})'
      required: false
      default: {}
      selector:
        object:
    service:
      description: 'Notification service entity_id (default: notify.notify)'
      default: notify.notify
      example: notify.notify
      required: false
      selector:
        text:
    is_persistent:
      description: 'Whether a persistent notification should be used (default: false)'
      default: false
      required: false
      selector:
        boolean:
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ service == ''notify.mobile_app_james_iphone'' }}'
      sequence:
      - service: notify.mobile_app_james_iphone
        data:
          title: '{{ title }}'
          message: '{{ message }}'
          data: '{{ data }}'
    default:
    - service: notify.notify
      data:
        title: '{{ title }}'
        message: '{{ message }}'
        data: '{{ data }}'
  - condition: '{{ is_persistent|default(False) }}'
  - service: notify.persistent_notification
    data:
      title: '{{ title }}'
      message: '{{ message }}'
apple_tv_off:
  alias: Apple TV Sleep
  sequence:
  - service: remote.send_command
    target:
      entity_id: remote.living_room_apple_tv
    data:
      delay_secs: 1
      command:
      - home_hold
      - select
  - service: media_player.turn_off
    data: {}
    target:
      entity_id: media_player.living_room_apple_tv
  mode: single
  icon: phu:apple-tv-box
goodbye:
  alias: Goodbye
  sequence:
  - alias: Turn off all fans
    service: fan.turn_off
    target:
      entity_id: all
    data: {}
  - alias: Turn off all interior lights
    service: light.turn_off
    target:
      entity_id: "{% set exclude_light = area_entities('outside')|select('contains',
        'light.')|list -%} {%- for device in states.light|selectattr('state','in','on')|rejectattr('entity_id','in',exclude_light)
        -%}\n  {{device.entity_id }}\n  {%- if not loop.last %},{% endif %}\n{%- endfor
        \ %}\n"
  mode: single
  icon: mdi:exit-run
disable_google_home_chime:
  alias: Disable Google Home Chime
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.all_speakers
        state: 'off'
      sequence:
      - service: media_player.volume_mute
        data:
          is_volume_muted: true
        target:
          entity_id:
          - media_player.living_room_display
          - media_player.dining_room_speaker
      - service: media_player.turn_on
        data: {}
        target:
          entity_id:
          - media_player.living_room_display
          - media_player.dining_room_speaker
      - wait_template: '{{ is_state(''media_player.living_room_display'', ''idle'')
          }}'
    - conditions:
      - condition: state
        entity_id: media_player.all_speakers
        state: idle
      sequence:
      - service: media_player.volume_mute
        data:
          is_volume_muted: false
        target:
          entity_id:
          - media_player.dining_room_speaker
          - media_player.living_room_display
    default: []
  - service: media_player.volume_mute
    data:
      is_volume_muted: true
    target:
      entity_id:
      - media_player.dining_room_speaker
      - media_player.living_room_display
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: media_player.volume_set
    data:
      volume_level: 0.5
    target:
      entity_id:
      - media_player.dining_room_speaker
      - media_player.living_room_display
  - service: media_player.volume_mute
    data:
      is_volume_muted: false
    target:
      entity_id:
      - media_player.dining_room_speaker
      - media_player.living_room_display
  mode: single
